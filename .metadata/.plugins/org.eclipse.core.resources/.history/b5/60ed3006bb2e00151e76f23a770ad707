package com.example.andenginetest;

import java.util.ArrayList;
import java.util.HashMap;

import org.andengine.engine.camera.Camera;
import org.andengine.engine.options.EngineOptions;
import org.andengine.engine.options.ScreenOrientation;
import org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.scene.background.Background;
import org.andengine.entity.sprite.Sprite;
import org.andengine.entity.util.FPSLogger;
import org.andengine.examples.adt.card.Card;
import org.andengine.input.touch.TouchEvent;
import org.andengine.input.touch.controller.MultiTouch;
import org.andengine.opengl.texture.TextureOptions;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory;
import org.andengine.opengl.texture.region.ITextureRegion;
import org.andengine.opengl.texture.region.TextureRegionFactory;
import org.andengine.ui.activity.SimpleBaseGameActivity;

import android.util.Log;
import android.widget.Toast;

/**
 * (c) 2010 Nicolas Gramlich
 * (c) 2011 Zynga
 *
 * @author Nicolas Gramlich
 * @since 18:20:40 - 18.06.2010
 */
public class MainActivity  extends SimpleBaseGameActivity {
	// ===========================================================
	// Constants
	// ===========================================================

	private static final int CAMERA_WIDTH = 800;
	

	private static final int CAMERA_HEIGHT = 480;

	// ===========================================================
	// Fields
	// ===========================================================

	private Camera mCamera;
	private BitmapTextureAtlas mCardDeckTexture;

	private Scene mScene;

	private HashMap<Card, ITextureRegion> mCardTotextureRegionMap;

	// ===========================================================
	// Constructors
	// ===========================================================

	// ===========================================================
	// Getter & Setter
	// ===========================================================

	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================

	@Override
	public EngineOptions onCreateEngineOptions() {
		this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);

		final EngineOptions engineOptions = new EngineOptions(true, ScreenOrientation.LANDSCAPE_FIXED, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera);
	//	engineOptions.getTouchOptions().setNeedsMultiTouch(true);

		return engineOptions;
	}

	@Override
	public void onCreateResources() {
		BitmapTextureAtlasTextureRegionFactory.setAssetBasePath("gfx/");

		this.mCardDeckTexture = new BitmapTextureAtlas(this.getTextureManager(), 1024, 512, TextureOptions.BILINEAR);
		BitmapTextureAtlasTextureRegionFactory.createFromAsset(this.mCardDeckTexture, this, "carddeck_tiled.png", 0, 0);
		this.mCardDeckTexture.load();

		this.mCardTotextureRegionMap = new HashMap<Card, ITextureRegion>();

		/* Extract the TextureRegion of each card in the whole deck. */
		for(final Card card : Card.values()) {
			final ITextureRegion cardTextureRegion = TextureRegionFactory.extractFromTexture(this.mCardDeckTexture, card.getTexturePositionX(), card.getTexturePositionY(), Card.CARD_WIDTH, Card.CARD_HEIGHT);
			this.mCardTotextureRegionMap.put(card, cardTextureRegion);
		}
	}

	@Override
	public Scene onCreateScene() {
		this.mEngine.registerUpdateHandler(new FPSLogger());

		this.mScene = new Scene();
		this.mScene.setOnAreaTouchTraversalFrontToBack();

		ArrayList<Integer> list = Suffle.getSuffledCards();
	
		
		this.addCard(0,GetBoundary.giveMeTheCoordinates(0),list);
		this.addCard(1,GetBoundary.giveMeTheCoordinates(1),list);
		this.addCard(2,GetBoundary.giveMeTheCoordinates(2),list);
		this.addCard(3,GetBoundary.giveMeTheCoordinates(3),list);
		

		this.mScene.setBackground(new Background(0.09804f, 0.6274f, 0.8784f));

		this.mScene.setTouchAreaBindingOnActionDownEnabled(true);

		return this.mScene;
	}

	// ===========================================================
	// Methods
	// ===========================================================

	private void addCard(int user, int[] singleBoundry,ArrayList<Integer> list ) {
		
		int pX ,  pY;

		for (int i=0;i<13;i++) 
		{
			
			if (user%2==0) {
				 pX = singleBoundry[0] +(singleBoundry[2]-singleBoundry[0])/13  + i*10;
				 pY = singleBoundry[1] ;
				
			}
			
			else {
				pX = singleBoundry[0] ;
				pY = singleBoundry[1] +(singleBoundry[3]-singleBoundry[1])/13  + i*10;
				
			}
			
			
		//	Card pCard = GetCard.getcard(user*13+i+1);
			int randValue=list.get(i+user*13);
			Card pCard = GetCard.getcard(randValue);
			Log.i("value",randValue+" ");
			
			
		
		
		final Sprite sprite = new Sprite(pX, pY, this.mCardTotextureRegionMap.get(pCard), this.getVertexBufferObjectManager()) {
			boolean mGrabbed = false;
			

			@Override
			public boolean onAreaTouched(final TouchEvent pSceneTouchEvent, final float pTouchAreaLocalX, final float pTouchAreaLocalY) {
				
				int x,y;
				x= (int) this.getX();
				y=(int) this.getY();
				switch(pSceneTouchEvent.getAction()) {
				
				
					case TouchEvent.ACTION_DOWN:
						this.setScale(1.25f);
						this.mGrabbed = true;
						break;
					case TouchEvent.ACTION_MOVE:
						if(this.mGrabbed) {
						this.setPosition(pSceneTouchEvent.getX() - Card.CARD_WIDTH / 2, pSceneTouchEvent.getY() - Card.CARD_HEIGHT / 2);
						}
						break;
					case TouchEvent.ACTION_UP:
						if(this.mGrabbed) {
							this.mGrabbed = false;
							this.setPosition(x,y);
							
							this.setScale(1.0f);
						}
						break;
				}
				return true;
			}
		};

		if (user %2==1) {
			sprite.setRotation(90.0f);
			
		}
		this.mScene.attachChild(sprite);
		this.mScene.registerTouchArea(sprite);
		
		}
	}

	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================
}
